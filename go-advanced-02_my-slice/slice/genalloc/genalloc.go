package main

import (
	"flag"
	"fmt"
	"os"
	"text/template"
)

const tmpl = `// Code generated by genalloc; DO NOT EDIT.

package slice

import (
	"fmt"
	"unsafe"
)

// ptrAdd moves the ptr n units in terms of type T.
func ptrAdd[T any](ptr *T, n int) *T {
	return (*T)(unsafe.Add(unsafe.Pointer(ptr),
		n*int(unsafe.Sizeof(*new(T)))))
}

// alloc allocates a array of T with a length of n.
func alloc[T any](n int) *T {
	switch n {
	default:
		panic(fmt.Errorf(
			"failed to allocate array of length %v", n))
	{{- range $n, $_ := . }}
	case {{$n}}:
		return (*T)(unsafe.Pointer(new([{{$n}}]T)))
	{{- end}}
	}
}
`

func main() {
	var n int
	flag.IntVar(&n, "n", 1000, "Max length of array")
	var filename string
	flag.StringVar(&filename, "o", "alloc.go", "Destination file name")
	flag.Parse()

	t := template.Must(template.New("t").Parse(tmpl))
	f, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666)
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	defer f.Close()
	t.Execute(f, make([]struct{}, n))
}
